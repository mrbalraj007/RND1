name: Java CI with Maven

on:
  push:
    branches: [ "main" ]
    paths-ignore:
      - 'deployment-service.yaml'
  pull_request:
    branches: [ "main" ]
  workflow_dispatch:
    inputs:
      grafana_version:
        description: 'Grafana version (leave empty for latest)'
        required: false
        default: ''
      prometheus_version:
        description: 'Prometheus version (leave empty for latest)'
        required: false
        default: ''
        
install-monitoring-tools:
    runs-on: self-hosted

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Setup environment
        shell: bash
        run: |
          echo "Setting up environment for monitoring tools installation"
          sudo apt-get update -y
          sudo apt-get install -y curl wget apt-transport-https software-properties-common

      # Check if Grafana is already installed
      - name: Check Grafana installation
        id: check_grafana
        shell: bash
        run: |
          if systemctl is-active --quiet grafana-server 2>/dev/null; then
            echo "Grafana is already installed and running"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Grafana needs to be installed"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest Grafana version if not specified
        if: steps.check_grafana.outputs.skip != 'true'
        id: grafana_version
        shell: bash
        run: |
          if [ -z "${{ github.event.inputs.grafana_version }}" ]; then
            GRAFANA_VERSION=$(curl -s https://api.github.com/repos/grafana/grafana/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
            echo "Using latest Grafana version: ${GRAFANA_VERSION}"
            echo "VERSION=${GRAFANA_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Using specified Grafana version: ${{ github.event.inputs.grafana_version }}"
            echo "VERSION=${{ github.event.inputs.grafana_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Grafana
        if: steps.check_grafana.outputs.skip != 'true'
        shell: bash
        run: |
          echo "Installing Grafana"
          wget -q -O - https://packages.grafana.com/gpg.key | sudo apt-key add -
          echo "deb https://packages.grafana.com/oss/deb stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list
          sudo apt-get update -y
          sudo apt-get install -y grafana
          sudo systemctl enable grafana-server
          sudo systemctl start grafana-server
          echo "Grafana installation completed"

      # Check if Prometheus is already installed
      - name: Check Prometheus installation
        id: check_prometheus
        shell: bash
        run: |
          if systemctl is-active --quiet prometheus 2>/dev/null; then
            echo "Prometheus is already installed and running"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Prometheus needs to be installed"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Get latest Prometheus version if not specified
        if: steps.check_prometheus.outputs.skip != 'true'
        id: prometheus_version
        shell: bash
        run: |
          if [ -z "${{ github.event.inputs.prometheus_version }}" ]; then
            PROMETHEUS_VERSION=$(curl -s https://api.github.com/repos/prometheus/prometheus/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
            echo "Using latest Prometheus version: ${PROMETHEUS_VERSION}"
            echo "VERSION=${PROMETHEUS_VERSION}" >> $GITHUB_OUTPUT
          else
            echo "Using specified Prometheus version: ${{ github.event.inputs.prometheus_version }}"
            echo "VERSION=${{ github.event.inputs.prometheus_version }}" >> $GITHUB_OUTPUT
          fi

      - name: Install Prometheus
        if: steps.check_prometheus.outputs.skip != 'true'
        shell: bash
        run: |
          echo "Installing Prometheus v${{ steps.prometheus_version.outputs.VERSION }}"
          sudo useradd --no-create-home --shell /bin/false prometheus || echo "User prometheus may already exist"
          sudo mkdir -p /etc/prometheus /var/lib/prometheus
          wget https://github.com/prometheus/prometheus/releases/download/v${{ steps.prometheus_version.outputs.VERSION }}/prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64.tar.gz
          tar -xvf prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64.tar.gz
          sudo cp prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/prometheus /usr/local/bin/
          sudo cp prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/promtool /usr/local/bin/
          if [ -d "prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/consoles" ]; then
            sudo cp -r prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/consoles /etc/prometheus/
          else
            sudo mkdir -p /etc/prometheus/consoles
          fi
          if [ -d "prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/console_libraries" ]; then
            sudo cp -r prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64/console_libraries /etc/prometheus/
          else
            sudo mkdir -p /etc/prometheus/console_libraries
          fi
          sudo tee /etc/prometheus/prometheus.yml > /dev/null << EOF
          global:
            scrape_interval: 15s
          scrape_configs:
            - job_name: 'prometheus'
              scrape_interval: 5s
              static_configs:
                - targets: ['localhost:9090']
          EOF
          sudo chown -R prometheus:prometheus /etc/prometheus /var/lib/prometheus
          sudo tee /etc/systemd/system/prometheus.service > /dev/null << EOF
          [Unit]
          Description=Prometheus
          Wants=network-online.target
          After=network-online.target
          [Service]
          User=prometheus
          Group=prometheus
          Type=simple
          ExecStart=/usr/local/bin/prometheus \\
            --config.file /etc/prometheus/prometheus.yml \\
            --storage.tsdb.path /var/lib/prometheus/ \\
            --web.console.templates=/etc/prometheus/consoles \\
            --web.console.libraries=/etc/prometheus/console_libraries
          [Install]
          WantedBy=multi-user.target
          EOF
          sudo systemctl daemon-reload
          sudo systemctl enable prometheus
          sudo systemctl start prometheus
          rm -rf prometheus-${{ steps.prometheus_version.outputs.VERSION }}.linux-amd64*
          echo "Prometheus installation completed"

      # Check if Node Exporter is already installed
      - name: Check Node Exporter installation
        id: check_node_exporter
        shell: bash
        run: |
          if systemctl is-active --quiet node_exporter 2>/dev/null; then
            echo "Node Exporter is already installed and running"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Node Exporter needs to be installed"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Node Exporter
        if: steps.check_node_exporter.outputs.skip != 'true'
        shell: bash
        run: |
          echo "Installing Node Exporter"
          # Create user for node exporter
          sudo useradd --no-create-home --shell /bin/false node_exporter || echo "User node_exporter may already exist"
          
          # Get latest Node Exporter version
          NODE_EXPORTER_VERSION=$(curl -s https://api.github.com/repos/prometheus/node_exporter/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
          echo "Using Node Exporter version: ${NODE_EXPORTER_VERSION}"
          
          # Download and extract Node Exporter
          wget https://github.com/prometheus/node_exporter/releases/download/v${NODE_EXPORTER_VERSION}/node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz
          tar -xvf node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64.tar.gz
          
          # Copy binary
          sudo cp node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64/node_exporter /usr/local/bin/
          sudo chown node_exporter:node_exporter /usr/local/bin/node_exporter
          
          # Create systemd service
          sudo tee /etc/systemd/system/node_exporter.service > /dev/null << EOF
          [Unit]
          Description=Node Exporter
          Wants=network-online.target
          After=network-online.target
          
          [Service]
          User=node_exporter
          Group=node_exporter
          Type=simple
          ExecStart=/usr/local/bin/node_exporter
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Enable and start service
          sudo systemctl daemon-reload
          sudo systemctl enable node_exporter
          sudo systemctl start node_exporter
          
          # Clean up
          rm -rf node_exporter-${NODE_EXPORTER_VERSION}.linux-amd64*
          echo "Node Exporter installation completed"
          
      # Check if Blackbox Exporter is already installed
      - name: Check Blackbox Exporter installation
        id: check_blackbox
        shell: bash
        run: |
          if systemctl is-active --quiet blackbox_exporter 2>/dev/null; then
            echo "Blackbox Exporter is already installed and running"
            echo "skip=true" >> $GITHUB_OUTPUT
          else
            echo "Blackbox Exporter needs to be installed"
            echo "skip=false" >> $GITHUB_OUTPUT
          fi

      - name: Install Blackbox Exporter
        if: steps.check_blackbox.outputs.skip != 'true'
        shell: bash
        run: |
          echo "Installing Blackbox Exporter"
          # Create user for blackbox exporter
          sudo useradd --no-create-home --shell /bin/false blackbox_exporter || echo "User blackbox_exporter may already exist"
          
          # Get latest Blackbox Exporter version
          BLACKBOX_EXPORTER_VERSION=$(curl -s https://api.github.com/repos/prometheus/blackbox_exporter/releases/latest | grep -oP '"tag_name": "v\K(.*)(?=")')
          echo "Using Blackbox Exporter version: ${BLACKBOX_EXPORTER_VERSION}"
          
          # Download and extract Blackbox Exporter
          wget https://github.com/prometheus/blackbox_exporter/releases/download/v${BLACKBOX_EXPORTER_VERSION}/blackbox_exporter-${BLACKBOX_EXPORTER_VERSION}.linux-amd64.tar.gz
          tar -xvf blackbox_exporter-${BLACKBOX_EXPORTER_VERSION}.linux-amd64.tar.gz
          
          # Create config directory
          sudo mkdir -p /etc/blackbox_exporter
          
          # Copy binary and config
          sudo cp blackbox_exporter-${BLACKBOX_EXPORTER_VERSION}.linux-amd64/blackbox_exporter /usr/local/bin/
          sudo cp blackbox_exporter-${BLACKBOX_EXPORTER_VERSION}.linux-amd64/blackbox.yml /etc/blackbox_exporter/
          sudo chown blackbox_exporter:blackbox_exporter /usr/local/bin/blackbox_exporter
          sudo chown -R blackbox_exporter:blackbox_exporter /etc/blackbox_exporter
          
          # Create systemd service
          sudo tee /etc/systemd/system/blackbox_exporter.service > /dev/null << EOF
          [Unit]
          Description=Blackbox Exporter
          Wants=network-online.target
          After=network-online.target
          
          [Service]
          User=blackbox_exporter
          Group=blackbox_exporter
          Type=simple
          ExecStart=/usr/local/bin/blackbox_exporter --config.file=/etc/blackbox_exporter/blackbox.yml
          
          [Install]
          WantedBy=multi-user.target
          EOF
          
          # Enable and start service
          sudo systemctl daemon-reload
          sudo systemctl enable blackbox_exporter
          sudo systemctl start blackbox_exporter
          
          # Clean up
          rm -rf blackbox_exporter-${BLACKBOX_EXPORTER_VERSION}.linux-amd64*
          echo "Blackbox Exporter installation completed"
      
      # We'll only update Prometheus config if we need to reconfigure it
      - name: Check if exporters need configuration
        id: check_config
        shell: bash
        run: |
          NEED_CONFIG="false"
          if [ "${{ steps.check_node_exporter.outputs.skip }}" == "false" ] || [ "${{ steps.check_blackbox.outputs.skip }}" == "false" ] || [ "${{ steps.check_prometheus.outputs.skip }}" == "false" ]; then
            NEED_CONFIG="true"
          fi
          echo "need_config=${NEED_CONFIG}" >> $GITHUB_OUTPUT

      - name: Update Prometheus configuration to include exporters
        if: steps.check_config.outputs.need_config == 'true'
        shell: bash
        run: |
          echo "Updating Prometheus configuration to scrape Node and Blackbox exporters"
          sudo tee /etc/prometheus/prometheus.yml > /dev/null << EOF
          global:
            scrape_interval: 15s
          
          scrape_configs:
            - job_name: 'prometheus'
              scrape_interval: 5s
              static_configs:
                - targets: ['localhost:9090']
                
            - job_name: 'node_exporter'
              scrape_interval: 10s
              static_configs:
                - targets: ['localhost:9100']
                
            - job_name: 'blackbox'
              metrics_path: /probe
              params:
                module: [http_2xx]
              static_configs:
                - targets:
                  - https://prometheus.io    # Example target
                  - https://grafana.com      # Example target
              relabel_configs:
                - source_labels: [__address__]
                  target_label: __param_target
                - source_labels: [__param_target]
                  target_label: instance
                - target_label: __address__
                  replacement: localhost:9115  # Blackbox exporter address
          EOF
          
          # Set permissions and restart Prometheus
          sudo chown -R prometheus:prometheus /etc/prometheus
          sudo systemctl restart prometheus
          echo "Prometheus configuration updated for exporters"
      
      - name: Verify services are running
        shell: bash
        run: |
          echo "Verifying services are running..."
          services_ok=true
          
          if ! systemctl is-active --quiet grafana-server; then
            echo "Grafana service is not running"
            services_ok=false
          else
            echo "Grafana is running"
          fi
          
          if ! systemctl is-active --quiet prometheus; then
            echo "Prometheus service is not running"
            services_ok=false
          else
            echo "Prometheus is running"
          fi
          
          if ! systemctl is-active --quiet node_exporter; then
            echo "Node Exporter service is not running"
            services_ok=false
          else
            echo "Node Exporter is running"
          fi
          
          if ! systemctl is-active --quiet blackbox_exporter; then
            echo "Blackbox Exporter service is not running"
            services_ok=false
          else
            echo "Blackbox Exporter is running"
          fi
          
          if [ "$services_ok" = false ]; then
            echo "Some services are not running properly!"
            exit 1
          fi
          
          echo "All monitoring tools are installed and running successfully!"
